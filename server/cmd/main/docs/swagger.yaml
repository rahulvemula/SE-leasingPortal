definitions:
  controllers.Credentials:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  controllers.Payload:
    properties:
      token:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Apartment:
    properties:
      address:
        type: string
      amenities:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.Complaint:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
      userId:
        type: integer
    type: object
  models.Lease:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      leaseEndDate:
        type: string
      leaseStartDate:
        type: string
      listingId:
        type: integer
      updatedAt:
        type: string
      userId:
        type: integer
    type: object
  models.Society:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      societyAddress:
        type: string
      societyAmenities:
        type: string
      societyCity:
        type: string
      societyImg:
        type: string
      societyName:
        type: string
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact: {}
paths:
  /apartments:
    get:
      consumes:
      - application/json
      description: Get details of all apartments
      parameters:
      - description: token header
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Apartment'
            type: array
      summary: Get details of all apartments
      tags:
      - apartments
  /complaints:
    get:
      consumes:
      - application/json
      description: Get details of all complaints
      parameters:
      - description: token header
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Complaint'
            type: array
      summary: Get details of all complaints
      tags:
      - complaints
  /leases:
    get:
      consumes:
      - application/json
      description: Get details of all leases
      parameters:
      - description: token header
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Lease'
            type: array
      summary: Get details of all leases
      tags:
      - leases
  /login:
    post:
      consumes:
      - application/json
      description: Create a new token with the input paylod
      parameters:
      - description: Create token
        in: body
        name: creds
        required: true
        schema:
          $ref: '#/definitions/controllers.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Payload'
      summary: Create a new token
      tags:
      - login
  /societies:
    get:
      consumes:
      - application/json
      description: Get details of all societies
      parameters:
      - description: token header
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Society'
            type: array
      summary: Get details of all societies
      tags:
      - societies
  /users:
    get:
      consumes:
      - application/json
      description: Get details of all users
      parameters:
      - description: token header
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get details of all users
      tags:
      - users
swagger: "2.0"
